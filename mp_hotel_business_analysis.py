# -*- coding: utf-8 -*-
"""MP-Hotel Business Analysis.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/14luYrYeS8eHXschMHuSJes-1nuZxhcn3
"""

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
# %matplotlib inline
from matplotlib import rcParams
import plotly.express as px
import plotly.graph_objects as go
import seaborn as sns
from scipy import stats
import calendar
import matplotlib.dates as mdates
from datetime import datetime, timedelta

import warnings
warnings.filterwarnings('ignore')

raw_hotel = pd.read_csv('https://drive.google.com/uc?export=download&id=1mSib0mphz12I8FryFd4bNmm896EhFbm8', low_memory=False)
raw_hotel.info()

"""| Feature Name | Description |
| --- | --- |
|**hotel** | Type of hotel |
|**is_canceled** | Value indicating if the booking was canceled (1) or not (0)|  
|**lead_time** | Number of days that elapsed between the entering date of the booking into the PMS and the arrival date|
|**arrival_date_year** | Year of arrival date|
|**arrival_date_month** | Month of arrival date with 12 categories: “January” to “December” |
|**arrival_date_week_number**| Week number of the arrival date |
|**arrival_date_day_of_month** | Day of the month of the arrival date  |
|**stays_in_weekend_nights** | Number of weekend nights (Saturday or Sunday) the guest stayed or booked to stay at the hotel  |
|**stays_in_weekdays_nights** | Number of week nights (Monday to Friday) the guest stayed or booked to stay at the hotel BO and BL/Calculated by counting the number of week nights |
|**adults** | Number of adults  |
|**children** | Number of children |
|**babies** | Number of babies |  
|**meal** | Meal menu |
|**city** | City of origin  |
|**market_segment** | Market segment designation. In categories, the term “TA” means “Travel Agents” and “TO” means “Tour Operators”  |
|**distribution_channel** | Booking distribution channel. The term “TA” means “Travel Agents” and “TO” means “Tour Operators”  |
|**is_repeated_guest** | Value indicating if the booking name was from a repeated guest (1) or not (0) |  
|**previous_cancellations** | Number of previous bookings that were cancelled by the customer prior to the current booking |
|**previous_bookings_not_canceled** | Number of previous bookings not cancelled by the customer prior to the current booking |  
|**booking_changes** | Number of changes/amendments made to the booking from the moment the booking was entered on the PMS until the moment of check-in or cancellation |
|**deposit_type** |  Type of deposit |
|**agent** | ID of the travel agency that made the booking  |
|**company** | ID of the company/entity that made the booking or responsible for paying the booking. ID is presented instead of designation for anonymity reasons  |
|**days_in_waiting_list** | Number of days the booking was in the waiting list before it was confirmed to the customer  |
|**customer_type** | TYpe of customer |
|**adr** | Average Daily Rate (Calculated by dividing the sum of all lodging transactions by the total number of staying nights) |  
|**required_car_parking_spaces** | Number of car parking spaces required by the customer |
|**total_of_special_requests** | Number of special requests made by the customer (e.g. twin bed or high floor) |
|**reservation_status** |  Status of reservation |

---



---

# Data Exploration

---



---
"""

raw_hotel.sample(5)

# Checking null values
null_cols = raw_hotel.columns[raw_hotel.isnull().any()]
null_val = raw_hotel[null_cols].isnull().sum().to_frame().reset_index()
null_val.columns = ['Column', 'Count']
null_val['Percent%'] = round(null_val['Count']/len(raw_hotel) * 100, 3)
null_val

"""There are 4 columns containing null values. The company column contains 94% of null values, means this columns doesn't really give us important thing to know. Delete this column might be the best way."""

# Check duplicated rows
raw_hotel.duplicated().sum()

"""Because of data type from some columns seems wrong, we can fix the data type into the correct one. But, for `children` column due to null value, we only can fix them after handling the null value which is in the next stage. `agent` and `company` contain ID number but doesn't mean its numerical calculation, so better to change the data type into object"""

# Fix the data type (minus children column)

raw_hotel['agent'] = raw_hotel['agent'].astype(str)
raw_hotel['company'] = raw_hotel['company'].astype(str)

# Categorize the features to see the distribution
num = ['lead_time', 'is_canceled', 'stays_in_weekend_nights', 'stays_in_weekdays_nights', 'adults', 'children', 'babies', 'is_repeated_guest', 'days_in_waiting_list', 'adr', 'total_of_special_requests', ]
cat = ['hotel','meal', 'city', 'market_segment', 'distribution_channel', 'deposit_type', 'customer_type', 'reservation_status', 'agent', 'company']

raw_hotel[num].describe()

raw_hotel[cat].describe()

"""---



---

# Exploratory Data Analysis (EDA)

---



---

## Unique Value
"""

raw_hotel['hotel'].unique()

raw_hotel['meal'].unique()

raw_hotel['city'].unique()

raw_hotel['market_segment'].unique()

raw_hotel['distribution_channel'].unique()

raw_hotel['deposit_type'].unique()

raw_hotel['customer_type'].unique()

raw_hotel['reservation_status'].unique()

"""## Abnormal Value"""

# Checking adr column
sns.boxplot(raw_hotel['adr'], orient='v')

# Checking data with adr is less than 0
raw_hotel[raw_hotel['adr'] < 0]

# Checking data with adr is more than 5000
raw_hotel[raw_hotel['adr'] > 5000]

"""We will drop these ourliers."""

# Checking the 0 guest or 0 night to ensure data
# Checking data with no guest
raw_hotel['total_guests'] = raw_hotel['children'] + raw_hotel['adults'] + raw_hotel['babies']
print('Data with 0 guest: {0} out of {1} all data'.format(raw_hotel[raw_hotel['total_guests'] == 0].shape[0], raw_hotel.shape[0]))

# Checking data with no night
raw_hotel['stay_duration'] = raw_hotel['stays_in_weekend_nights'] + raw_hotel['stays_in_weekdays_nights']
print('Data with 0 night: {0} out of {1} all data'.format(raw_hotel[raw_hotel['stay_duration'] == 0].shape[0], raw_hotel.shape[0]))

"""These data also abnormal.

---



---

# Data Cleansing

---



---
"""

# Delete duplicated rows and noise data
hotel = raw_hotel.copy()

hotel.drop_duplicates(inplace=True)
hotel.drop(columns=['company','city'], inplace=True)

"""Next step is handling missing value. This dataset has 4 columns containing missing value, `children`, `city`, `agent`, and `company`.
1. Because of many missing value, we already deleted the `city` and `company` previously.
2. Missing value in `agent` will be replaced by the most frequent value that is agent with ID 9.0. This ID dominated around 30% from 334 unique value.
3. For `children`, because of the missing value only 4, we can delete this rows so the analysis would not interpretated wrong.  
4. From the statistical analysis, `adr` column has minus value (< 0) and extremely maximum value (>5000) which can be categorized as outliers, so we will drop the rows.  
5. Removing rows with 0 guest and 0 night due to abnormal value.  
6. Replace Undefined meal to 'No Meal'
"""

# Handling Missing and Unique Value

hotel['agent'].fillna(hotel['agent'].mode(), inplace=True)
hotel['meal'].replace('Undefined', 'No Meal', inplace=True)

# Delete Abnormal Value
min_adr = hotel[((hotel.adr < 0))].index
hotel = hotel.drop(min_adr)

max_adr = hotel[((hotel.adr > 5000))].index
hotel = hotel.drop(max_adr)

t_guest = hotel[((hotel.total_guests == 0))].index
hotel = hotel.drop(t_guest)

stay_dur = hotel[((hotel.stay_duration == 0))].index
hotel = hotel.drop(stay_dur)

# Removes remaining null values - children
hotel.dropna(axis=0, inplace=True)
print(f'Is still there any missing value ? {hotel.isnull().any().any()}')

print(f'Original Data :' , raw_hotel.shape)
print(f'Cleaned Data :' , hotel.shape)

hotel['children'] = hotel['children'].astype('int64')
data_hotel = hotel.copy()
data_hotel.to_csv('hotel_bookings_cleaned.csv', index=False)

"""All clear! The dataset is ready to be analyzed.

---



---

# Data Visualization

---



---

## 1. Analyzing Monthly Hotel Bookings

There are 2 types of hotel, they are City Hotel and Resort Hotel. First, we will analyze how the trends from each hotel in period of time 2017-2019.
"""

data_hotel['hotel'].value_counts()

"""City Hotel has more reservations than Resort Hotel. Now, we'll take a look at the share of reservation status (Check Out, Canceled, No Show) in total 3 years."""

#rsv_hotel = data_hotel.groupby(['hotel', 'arrival_date_year', 'reservation_status'])['reservation_status'].count().reset_index(name='total_reservations')
#rsv_hotel

data_hotel.groupby(['hotel','reservation_status'])['reservation_status'].count().reset_index(name='grand_total')

checkout = (36364, 25316)
canceled = (15096, 7611)
noshow = (726, 259)
xpos = np.arange(len(checkout))
xpos

sns.set(style='white')
fig, ax = plt.subplots(1, figsize=(8,5))
barwidth = 0.2
plt.bar(xpos, checkout, color='#011627', width = barwidth, label ='Check Out')
plt.bar(xpos+0.2, canceled, color='#FFBA08', width = barwidth, label = 'Canceled')
plt.bar(xpos+0.4, noshow, color='#D00000', width = barwidth, label = 'No Show')
plt.xticks(xpos+0.2, ('City Hotel', 'Resort Hotel'))
plt.xlabel('Hotel')
plt.ylabel('Total')
plt.ylim(-50, 45000)
ax.set_title('Reservation Status of Each Hotel', x=-0.05, y=1.08, loc='left', fontweight='bold', fontsize=20, alpha=.8)
ax.text(x=-0.25, y=47500,s="City Hotel has more reservations than Resort Hotel", fontsize=10, style='italic')

for label in ax.containers:
    ax.bar_label(label, fontsize=9)
plt.legend()
plt.tight_layout()
plt.savefig('rsv_hotel.png')

"""Now we can see how past reservations have looked. City hotel has more reservations including more check out, more canceled, and more no-show than resort hotel. The canceled reservations in city hotel are almost half of the total checkout so need to be analyzed further to avoid this in the future.  
Next thing is to analyze the trend monthly from arrival date.
"""

# Take a look at arrival date
arv_date = data_hotel.groupby(['hotel', 'arrival_date_day_of_month', 'arrival_date_month', 'arrival_date_year'])['hotel'].count().reset_index(name='Count')
arv_date.sample(5)

"""Because the data is too large, we just need to check if there's wrong input of arrival date."""

date_cols = arv_date['arrival_date_day_of_month'].astype(str) + ' ' + \
            arv_date['arrival_date_month'] + ' ' + \
            arv_date['arrival_date_year'].astype(str)
date_cols

# New column as a checker
arv_date['arv_c_date'] = pd.to_datetime(date_cols, errors='coerce')
arv_date[arv_date['arv_c_date'].isnull()]

"""Some dates appear wrong, including in February, which should only have 28 days, but there are the 29th and 30th. Then in September, which only has 30 days, there is the 31st. In this case, we can fix those date into the last day of the month."""

# Fix the wrong date
def parse_date(dt):
    d, m, y = dt.split(' ')
    m = datetime.strptime(m, '%B').month

    # Check day
    last = calendar.monthrange(int(y), m)[-1]
    if int(d) > last:
        m += 1
        d = str(int(d) - last)
    new_date = '-'.join([y, str(m), d])
    return datetime.strptime(new_date, '%Y-%m-%d')

arv_date['arv_c_date'] = date_cols.apply(lambda x : parse_date(x))
arv_date['arrival_date_day_of_month'] = arv_date['arv_c_date'].apply(lambda x : x.strftime('%d'))
arv_date['arrival_date_month'] = arv_date['arv_c_date'].apply(lambda x : x.strftime('%B'))

# Re-check
arv_date[arv_date['arrival_date_month']=='February']

# See the correct total of reservations
rsv_hotel_month = arv_date.groupby([pd.Grouper(key='arv_c_date', freq='M'), 'hotel'])['Count'].sum().unstack()
rsv_hotel_month

# Visualize the data
sns.set(style='darkgrid')
fig, ax = plt.subplots(1, 1, figsize=(10, 6))
sns.lineplot(x=rsv_hotel_month.index, y=rsv_hotel_month['City Hotel'], color='#D90429', linewidth=3)
sns.lineplot(x=rsv_hotel_month.index, y=rsv_hotel_month['Resort Hotel'], color='#560BAD', linewidth=3)

plt.xlabel('Arrival Date')
plt.ylabel('Number of Bookings')
plt.tick_params(axis='both', which='major', labelsize=10)
ax.xaxis.set_major_locator(mdates.MonthLocator(interval=6))
ax.xaxis.set_major_formatter(mdates.DateFormatter('%b %Y'))
plt.xlim(datetime(2017, 1, 1), datetime(2020, 3, 31))
plt.ylim(0, 4000)

# Anotation

plt.axvline(datetime(2019, 6, 30), linestyle='--', color='#FFBE0B')
plt.axvline(datetime(2019, 10, 31), linestyle='--', color='#FFBE0B')
plt.axhline(y=0, color ='black', linewidth=2, alpha=.7)
plt.text(datetime(2019, 7, 6), y=3750, s='Peak Season \nJune-Oct 2019', fontsize=9, color='black', va='center')
plt.stackplot((datetime(2019, 6, 30), datetime(2019, 10, 31)), [[4000]], color='#FFBE0B', alpha=0.3)

ax.plot(datetime(2017, 11, 14), 1400, 'o',
        ms=40, mec='black', mfc='none', mew=2, alpha=.8)
plt.text(x=datetime(2017, 2, 28), y=1600, s='City Hotel bookings began \nto exceed Resort Hotels \nSince Nov 2017',
         fontweight='bold', fontsize=10, alpha=.7, color='black')

plt.text(x=rsv_hotel_month.index[-1]+timedelta(7), y=rsv_hotel_month['City Hotel'][-1], s='City Hotel',
         fontweight='bold', fontsize=11, color='#D90429')
plt.text(x=rsv_hotel_month.index[-1]+timedelta(7), y=rsv_hotel_month['Resort Hotel'][-1], s='Resort Hotel',
         fontweight='bold', fontsize=11, color='#560BAD')
ax.set_title('Hotel Booking Trends From City Hotels and Resort Hotels\nfor Three Years',
             x=-0.05, y=1.06, loc='left', fontweight='bold', fontsize=20)

plt.tight_layout()
plt.savefig('hotel_bookings_trend.png')
plt.show()

"""## 2. Impact Analaysis of Stay Duration on Hotel Bookings Cancellation Rates

**Stay Duration for Each Hotel**
"""

stay_value = data_hotel['stay_duration'].unique()
print(sorted(stay_value))

# Take a look at the distribution of stay duration
plt.figure(figsize = (5,4))
sns.histplot(data=data_hotel, x='stay_duration', binwidth=1)

"""The stay duration starts from 1 to the longest 69 days. From the plot above, we can see the most stay duration has happened is around one to seven days (a week). The difference in stay duration seems very large, so it needs to be kept simpler by grouping the durations."""

def stay_duration_group(x):
    if x['stay_duration'] >= 1 and x['stay_duration'] <= 7:
        stay_duration_group = 'group 1'
    elif x['stay_duration'] >= 8 and x['stay_duration'] <= 14:
        stay_duration_group = 'group 2'
    elif x['stay_duration'] >= 15 and x['stay_duration'] <= 21:
        stay_duration_group = 'group 3'
    elif x['stay_duration'] >= 22 and x['stay_duration'] <= 30:
        stay_duration_group = 'group 4'
    else:
        stay_duration_group = 'group 5' # More than a month
    return stay_duration_group

data_hotel['stay_group'] = data_hotel.apply(lambda x : stay_duration_group(x), axis = 1)
data_hotel.sample(5)

h_stay_group = data_hotel.groupby(['hotel', 'stay_group']).agg({'stay_duration':'count'}).reset_index().rename(columns = {'stay_duration' : 'Counts'})
h_stay_group

sns.set(style='whitegrid')
fig, ax = plt.subplots(figsize=(8, 5))
plt.title("Group of Stay Duration", fontsize=15, color='black', weight='bold', pad=45)
sns.countplot(x='stay_group', data=data_hotel, hue='hotel', edgecolor= 'pink', palette='RdPu')

plt.tick_params(axis='both', which='major', labelsize=9)
plt.grid()
plt.legend(title='Hotel Type', title_fontsize=9, prop={'size':8})
plt.xlabel('Stay Duration', fontsize=11)
plt.xticks(range(0,5,1), labels=['1 Week', '2 Weeks', '3 Weeks', '1 Month', '>1 Month'], fontsize=10)

plt.bar_label(ax.containers[0], padding=5, fontsize=8)
plt.bar_label(ax.containers[1], padding=2, fontsize=8)

sns.despine()
plt.tight_layout()
plt.savefig('grup_stayduration.png')

"""**The Canceled Bookings**"""

# Ratio of canceled booking
data_hotel['is_canceled'] = data_hotel['is_canceled'].replace({1:'Canceled', 0:'Not Canceled'})
canceled = data_hotel.groupby('is_canceled')['hotel'].agg('count').reset_index().rename(columns = {'hotel' : 'count'})
canceled

cancel_rate= data_hotel.groupby(['hotel', 'stay_group', 'is_canceled']).agg({'stay_duration':'count'}).reset_index().rename(columns = {'stay_duration' : 'c_days'})
sum = cancel_rate.groupby(['hotel', 'stay_group']).agg({'c_days':'sum'}).reset_index().rename(columns = {'c_days' : 'total_days'})

cancel_rate = cancel_rate.merge(sum, on=['hotel', 'stay_group'])
cancel_rate['cancel_rate'] = round((cancel_rate['c_days']/cancel_rate['total_days'])*100, 2)
cancel_rate

# Filter only the canceled booking
hotel_cancel = cancel_rate[cancel_rate['is_canceled']=='Canceled'].sort_values('stay_group')
hotel_cancel_pivot = hotel_cancel.pivot_table(index=['hotel', 'stay_group'], columns='is_canceled', values='c_days').reset_index()
hotel_cancel_pivot['cancel_rate'] = cancel_rate['cancel_rate']
hotel_cancel_pivot

sns.set(style='whitegrid')
fig, ax = plt.subplots(figsize=(10, 6))
plt.title("Trends in Hotel Reservation Cancellation Rates by Stay Duration", fontsize=15, color='black', weight='bold', pad=65)
plt.text(x=-1, y=105, s="The least canceled bookings were on around 1-7 days \nCustomers who stayed around 8-14 days have the highest cancellation rates \nThe cancellation rate for customers who stayed more than a month is also high, need to be aware of junk leads", fontsize=10, fontstyle='italic')
sns.barplot(x='stay_group', y='cancel_rate', data=hotel_cancel_pivot, hue='hotel', edgecolor= 'pink', palette='spring')

sns.regplot(x=np.arange(0, len(hotel_cancel_pivot[hotel_cancel_pivot['hotel'] == 'City Hotel'])), y='cancel_rate', color='#C9184A',
            data=hotel_cancel_pivot[hotel_cancel_pivot['hotel'] == 'City Hotel'], scatter=False, label = 'Trend City Hotel', truncate=False)
sns.regplot(x=np.arange(0, len(hotel_cancel_pivot[hotel_cancel_pivot['hotel'] == 'Resort Hotel'])), y='cancel_rate', color='#582F0E',
            data=hotel_cancel_pivot[hotel_cancel_pivot['hotel'] == 'Resort Hotel'], scatter=False, label='Trend Resort Hotel', truncate=False)
plt.tick_params(axis='both', which='major', labelsize=9)
plt.grid()
plt.legend(title='Hotel Type', title_fontsize=9, prop={'size':8})
plt.xlabel('Stay Duration', fontsize=11)
plt.ylabel('Cancellation Rate(%)', fontsize=11)
plt.ylim(0, 100)
plt.xticks(range(0,5,1), labels=['1 Week', '2 Weeks', '3 Weeks', '1 Month', '>1 Month'], fontsize=10)

plt.bar_label(ax.containers[0], padding=5, fontsize=8)
plt.bar_label(ax.containers[1], padding=2, fontsize=8)

sns.despine()
plt.tight_layout()
plt.savefig('cancelation_rate.png')

"""## 3. Impact Analysis of Lead Time on Hotel Bookings Cancellation Rate

**See the Lead Time Range**
"""

data_hotel['lead_time'].value_counts()

data_hotel['lead_time'].value_counts().to_frame().sort_index(ascending=True).head(60).rename(columns = {'lead_time' : 'Count'})

data_hotel.query('lead_time >=365').lead_time.value_counts()

# Take a look at the distribution of lead time
plt.figure(figsize = (10,5))
sns.histplot(data=data_hotel, x='lead_time')

"""As we can see from the analysis, the lead time range is way too large from 1 day to 2 years. Well, the 2 year lead-time seems quite nonsense and the customer counts are also few so we can group them as one group. Now, for a lead time of under a year, the most frequent is around 1 week which reaches thousands of customers.
So, we can group the lead time based on frequency and duration of lead time as follows :   
a. 1-week (1-8 days)  
b. 2-3 weeks  (9-20 days)  
c. 1-month (21-31 days)  
d. 2 months   
e. 3-4 months  
f. 5-6 months  
g. 7-9 months   
h. 1 year (10-12 months)   
i. >1 year
"""

def lead_time_group(x):
    if x['lead_time'] >= 0 and x['lead_time'] <= 8:
        lead_time_group = '1 Week'
    elif x['lead_time'] >= 9 and x['lead_time'] <= 20:
        lead_time_group = '2-3 Weeks'
    elif x['lead_time'] >= 21 and x['lead_time'] <= 31:
        lead_time_group = '1 Month'
    elif x['lead_time'] >= 32 and x['lead_time'] <= 60:
        lead_time_group = '2 Months'
    elif x['lead_time'] >= 61 and x['lead_time'] <= 120:
        lead_time_group = '3-4 Months'
    elif x['lead_time'] >= 121 and x['lead_time'] <= 180:
        lead_time_group = '5-6 Months'
    elif x['lead_time'] >= 181 and x['lead_time'] <= 270:
        lead_time_group = '7-9 Months'
    elif x['lead_time'] >= 271 and x['lead_time'] <= 365:
        lead_time_group = '1 Year'
    else:
        lead_time_group = '>1 Year' # More than a month
    return lead_time_group

data_hotel['lead_time_group'] = data_hotel.apply(lambda x : lead_time_group(x), axis = 1)

h_lead_group = data_hotel.groupby(['hotel', 'lead_time_group']).agg({'lead_time':'count'}).reset_index().rename(columns = {'lead_time' : 'Counts'})
h_lead_group

sns.set(style='whitegrid')
fig, ax = plt.subplots(figsize=(10, 5))
plt.title("Group of Lead Time", fontsize=15, color='black', weight='bold', pad=45)
sns.countplot(x='lead_time_group', data=data_hotel, hue='hotel', edgecolor= 'green', palette='YlGn')

plt.tick_params(axis='both', which='major', labelsize=9)
plt.grid()
plt.legend(title='Hotel Type', title_fontsize=9, prop={'size':8})
plt.xlabel('Lead Time', fontsize=11)
plt.xticks(range(0,9,1), labels=['1 Week', '2-3 Weeks', '1 Month', '2 Months', '3-4 Months', '5-6 Month', '7-9 Month', '1 Year', '>1 Year'], fontsize=10)

plt.bar_label(ax.containers[0], padding=5, fontsize=8)
plt.bar_label(ax.containers[1], padding=5, fontsize=8)

sns.despine()
plt.tight_layout()
plt.savefig('grup_leadtime.png')

cancel_rate2= data_hotel.groupby(['hotel', 'lead_time_group', 'is_canceled']).agg({'lead_time':'count'}).reset_index().rename(columns = {'lead_time' : 'c_lead'})
sum = cancel_rate2.groupby(['hotel', 'lead_time_group']).agg({'c_lead':'sum'}).reset_index().rename(columns = {'c_lead' : 'total_leadtime'})

cancel_rate2 = cancel_rate2.merge(sum, on=['hotel', 'lead_time_group'])
cancel_rate2['cancel_rate_lead'] = round((cancel_rate2['c_lead']/cancel_rate2['total_leadtime'])*100, 2)
cancel_rate2

# Filter only the canceled booking
hotel_cancel2 = cancel_rate2[cancel_rate2['is_canceled']=='Canceled'].sort_values('lead_time_group')
hotel_cancel_pivot2 = hotel_cancel2.pivot_table(index=['hotel', 'lead_time_group'], columns='is_canceled', values='c_lead').reset_index()
hotel_cancel_pivot2['cancel_rate'] = cancel_rate2['cancel_rate_lead']
hotel_cancel_pivot2

sns.set(style='whitegrid')
fig, ax = plt.subplots(figsize=(10, 6))
plt.title("Trends in Hotel Reservation Cancellation Rates by Lead Time", fontsize=15, color='black', weight='bold', pad=65)
plt.text(x=-1, y=105, s="No matter what type of hotel, the lead time really has a big impact on the cancellation rate \nFor Resort Hotel, the cancellation rate seems quite stable around the thirties to seventies \nFor City Hotel, the highest cancellation rate comes from 2 months of lead time and the lowest is a month", fontsize=10, fontstyle='italic')
sns.barplot(x='lead_time_group', y='cancel_rate', data=hotel_cancel_pivot2, hue='hotel', edgecolor= 'purple', palette='PuRd')

plt.tick_params(axis='both', which='major', labelsize=9)
plt.grid()
plt.legend(title='Hotel Type', title_fontsize=9, prop={'size':8})
plt.xlabel('Lead Time', fontsize=11)
plt.ylabel('Cancellation Rate(%)', fontsize=11)
plt.ylim(0, 100)
plt.xticks(range(0,9,1), labels=['1 Week', '2-3 Weeks', '1 Month', '2 Months', '3-4 Months', '5-6 Month', '7-9 Month', '1 Year', '>1 Year'], fontsize=10)

plt.bar_label(ax.containers[0], padding=5, fontsize=8)
plt.bar_label(ax.containers[1], padding=2, fontsize=8)

sns.despine()
plt.tight_layout()
plt.savefig('cancel_rate_leadtime.png')

